# -*- coding: utf-8 -*-
"""credit_risk_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Gix4uSt-FqAKknZQ0P3VZFJx9Au7GGpb
"""

# Import the modules
import numpy as np
import pandas as pd
from pathlib import Path
from sklearn.metrics import confusion_matrix, classification_report

"""---

## Split the Data into Training and Testing Sets

### Step 1: Read the `lending_data.csv` data from the `Resources` folder into a Pandas DataFrame.
"""

# Read the CSV file from the Resources folder into a Pandas DataFrame
lending_data_df = pd.read_csv('lending_data.csv')
# Review the DataFrame
lending_data_df.head()

"""### Step 2: Create the labels set (`y`)  from the “loan_status” column, and then create the features (`X`) DataFrame from the remaining columns."""

# Separate the data into labels and features

# Separate the y variable, the labels
y= lending_data_df["loan_status"]
# Separate the X variable, the features
X= lending_data_df.drop(columns="loan_status")

"""### Step 3: Split the data into training and testing datasets by using `train_test_split`."""

#Import the train_test_learn_module
from sklearn.model_selection import train_test_split

#split the data using train_test_split
#Assign a random_state of 1 to the function
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)

"""---

## Create a Logistic Regression Model with the Original Data

###  Step 1: Fit a logistic regression model by using the training data (`X_train` and `y_train`).
"""

# Import the LogisticRegression module from SKLearn
from sklearn.linear_model import LogisticRegression

# Instantiate the Logistic Regression model
# Assign a random_state parameter of 1 to the model
lr_model = LogisticRegression(random_state=1)
# Fit the model using training data
lr_model.fit(X_train, y_train)

"""### Step 2: Save the predictions on the testing data labels by using the testing feature data (`X_test`) and the fitted model."""

# Make a prediction using the testing data
y_pred = lr_model.predict(X_test)

"""### Step 3: Evaluate the model’s performance by doing the following:

* Generate a confusion matrix.

* Print the classification report.
"""

# Generate a confusion matrix for the model
confusion_matrix(y_test, y_pred)

# Print the classification report for the model
print(classification_report(y_test, y_pred))

"""### Step 4: Answer the following question.

**Question:** How well does the logistic regression model predict both the `0` (healthy loan) and `1` (high-risk loan) labels?

**Answer:** The model does a great job using the original data to predict the values of the healthy loans. Precision was 100% and recall was 99%.


The model was relativly good at predicting the values of the high risk loans, but not as good at predicting the health loans. Precision was 85% and recall was 91%

---
"""